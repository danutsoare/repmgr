#!/bin/bash
# PostgreSQL {{ postgresql_version }} status check script for cluster {{ cluster_name }}
# Generated by Ansible

set -e

CLUSTER_NAME="{{ cluster_name }}"
PG_VERSION="{{ postgresql_version }}"
PG_PORT="{{ postgresql_port }}"
PG_USER="{{ postgresql_user }}"
PG_DATA_DIR="{{ postgresql_data_dir }}"
SERVICE_NAME="{{ postgresql_service_name }}"

echo "=== PostgreSQL ${PG_VERSION} Status Check for ${CLUSTER_NAME} ==="
echo "Date: $(date)"
echo ""

# Check service status
echo "Service Status:"
systemctl is-active ${SERVICE_NAME} && echo "✓ Service is running" || echo "✗ Service is not running"
systemctl is-enabled ${SERVICE_NAME} && echo "✓ Service is enabled" || echo "✗ Service is not enabled"
echo ""

# Check if PostgreSQL is accepting connections
echo "Connection Status:"
if sudo -u ${PG_USER} /usr/pgsql-${PG_VERSION}/bin/pg_isready -p ${PG_PORT} -h localhost; then
    echo "✓ PostgreSQL is accepting connections on port ${PG_PORT}"
else
    echo "✗ PostgreSQL is not accepting connections on port ${PG_PORT}"
fi
echo ""

# Check data directory
echo "Data Directory:"
if [ -d "${PG_DATA_DIR}" ]; then
    echo "✓ Data directory exists: ${PG_DATA_DIR}"
    if [ -f "${PG_DATA_DIR}/PG_VERSION" ]; then
        echo "✓ Database is initialized (version: $(cat ${PG_DATA_DIR}/PG_VERSION))"
    else
        echo "✗ Database not initialized"
    fi
else
    echo "✗ Data directory does not exist: ${PG_DATA_DIR}"
fi
echo ""

# Check disk space
echo "Disk Space:"
df -h ${PG_DATA_DIR}
echo ""

# Show active connections (if PostgreSQL is running)
echo "Active Connections:"
if sudo -u ${PG_USER} /usr/pgsql-${PG_VERSION}/bin/pg_isready -p ${PG_PORT} -h localhost > /dev/null 2>&1; then
    sudo -u ${PG_USER} /usr/pgsql-${PG_VERSION}/bin/psql -p ${PG_PORT} -d postgres -c "SELECT count(*) as active_connections FROM pg_stat_activity WHERE state = 'active';" 2>/dev/null || echo "Could not query connections"
else
    echo "PostgreSQL not available for connection query"
fi
echo ""

# Show last few log entries
echo "Recent Log Entries:"
if [ -d "{{ postgresql_log_dir }}/{{ postgresql_version }}" ]; then
    find {{ postgresql_log_dir }}/{{ postgresql_version }} -name "postgresql-${CLUSTER_NAME}-*.log" -type f -exec ls -lt {} \; | head -1 | while read line; do
        logfile=$(echo $line | awk '{print $NF}')
        echo "Latest log file: $logfile"
        tail -10 "$logfile" 2>/dev/null || echo "Could not read log file"
    done
else
    echo "Log directory not found"
fi